                       -----
                    Architecture
                       -----
                  Cairo Project Team
                       -----

Speech Recognition System

  Cairo implements one layer of a complete speech processing stack.  It provides a standards based, scalable speech resource provider.  Cairo does not implement speech recognition and sythesis engines.  It integrates available opensource engines and provides MRCPv2 interface to those resources.  At present cairo supports FreeTTS and Sphinx4 for sythesis and recognition respectively.

  Users of Cairo can implement their own mrcpv2 client, but most typical implementations will also contain a VoiceXML client.  In this configuration voicexml applications are implemented as web applications (perhpas a war file if you are using something like java and tomcat or perhaps a PHP application if your perfer LAMP technology).

  Clients to the voiceXML server typically use SIP to establish a session.  This may be done directly from a SIP phone or other SIP capable client.  In most implementation Access to the telephone network is provided through a PBX. 

[images/StackDiagram.gif] 

  Figure 1 -- The Speech Recognition Stack

Sequence of Events

   This a typical sequence of events establishing a session, given a system configured as shown in Figure 1.

   [[1]] A call is placed to IVR phone number.  (Sequence Diagram, Step 1).

   [[2]] PBX receives call and routes the call to voiceXML Server.  It sends a SIP message to establish a session with the speech system.  (Sequence Diagram, Step 2). 

   [[3]] The voiceXML server retrieves the voiceXML document from the web server corresponding to the phone number called.  (Sequence Diagram, Step 3).

   [[4]] The voiceXML server uses SIP/SDP (as specified in the MRCPv2 spec) to establish a session with the resources needed for the call.  (Sequence Diagram, Step 4).

   [[5-9]] Cairo server allocates resources and sets up control (MRCPv2) and media channels (RTP) for the call and sends SIP invite response back to the voicexml server with the results of the channel allocation.  (Sequence Diagram, Steps 5 thru 9).

   [[10]] VoiceXML server sends SIP invite response with RTP media channel information back to the PBX.  (Sequence Diagram, Step 10).

   [[11-14]] The PBX establishes the RTP channels to and from cairo server.  (Sequence Diagram, Steps 11 thru 14).

   [[15-24]] VoiceXML server interprets the voiceXML and makes MRCPv2 calls to cairo as needed to execute the app.  Note that speech is being streamed directly between the PBX/phone and the cairo server.  (Sequence Diagram, Steps 15 thru 24).

   [[25-29]] End of session occurs.  VoiceXML Server issues SIP Bye message to Cairo server so that it can release resources.  Also issues SIP Bye to pbx to end session with caller.  (Sequence Diagram, Step 25 thru 29).

   []

   The following figure shows the sequence of events in some detailed in the form of a sequence diagram.

[images/SessionEstablishment.jpg] 

  Figure 2 -- Sequence Diagram showing typical interaction between system components

Cairo Architecture

   There are three main componenst to the Cairo server.

   * The Resource Manager

   * The Transmitter Resource

   * The Receiver Resource

   []

   The Resource Manager contains the SIP agent, the resource registry and a session manager.  There is one resource manager but there can be any number of Transmitter and Receiver resources.  You can configure these processes to run on the same machine or spread across a set of servers.  Receiver resource handle processing input audio streams.  Receiver functions include speech recognizers and speech recorders.  Transmitter resources handle output audio streams.  Speech synthesis is an example of a transmitter function.  Both transmitter and receiver resources have an embedded MRCP server that will handle MRCP requests  The resoruce will then perform processing as specified in that request using the speech processing engines as needed.

   When the resource manager receieves a sip invite request, it determines which resources will be needed as specified in the SDP payload.  It then checks the registry to identify a receiver and/or transmitter that will be used for the session.  It uses RMI to communicate with the resources.  The resource establish the control (MRCP) and media (RTP) channels needed for the request and responds to the resource manager with information it needs for the SIP invitce response.

   Note that each resource has its own pool of speech processing resources that are shared across sessions in that process.  

   Changes to architecture are planned for version 1.0.  See {{{FutureArchitecture.html}Future Cairo Architecure}} for details.

[images/CairoDiagram0.gif] 

  Figure 3 -- Cairo Block Diagram

